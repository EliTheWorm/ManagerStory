/** \file VoiceManager
 *  \brief Класс обеспечивает управление звуком в игре. Звуки делятся на три типа: музыка, звуки UI
 * и все остальные. На музыку и UI выделяется по одному своему компоненту AudioSource. На остальные 
 * звуки выделяется три компонента AudioSource: при необходимости издать звук ищется свободный 
 * среди этих трех. В функционал менеджера входит:
 *          - Воспроизведение звука кнопок
 *          - Воспроизведение и остановка музыки
 *          - Воспроизведение шумов
 *          - Отключение всего звука в игре
 *
 *         Требования: На GameObject нужно повесить 5 компонент типа AudioSource
 *         Copyright (c) 2015-2016 GreenSnowGames.
 */



using UnityEngine;
using System.Collections;

public class VoiceManager : MonoBehaviour {
  // AudioSource для управления воспроизведением Музыки
  AudioSource asMusic;

  // AudioSource для управления воспроизведением звуков кнопок
  AudioSource asUISound;

  // Массив AudioSource для управления воспроизведением всех остальных звуков
  AudioSource[] asSound = new AudioSource[3];

  // Локальная переменная, необходимая для того чтобы собрать все AudioSource на объекте
  AudioSource[] audios;

 

  /// Открытое свойство Одиночки для доступа к полям и методам из других классов
  /**
   * НЕ-Ленивая реализация паттерна Одиночка. Объект нужно предварительно создать на сцене
   * @return ссылка на Одиночку
   */
  public static VoiceManager me { get; private set; }

  /// Корректная инициализации Одиночки
  /**
   * В методе проверяется - существует ли уже экземпляр класса на сцене
   */
  void Awake() {
    // Убедимся, что нет других экземпляров этого класса
    if (me != null && me != this) {
      // если уже есть, но уничтожаем конфликтную копию
      Destroy(gameObject);       
    } else {
      // Сохраняем ссылку на Одиночку
      me = this;
      // Объект не будет уничтожаться перед загрузкой следующей сцены
      GameObject.DontDestroyOnLoad(this.gameObject); 
    }
  }

  /// Распределение компонентов AudioSource
  /**
   * Динамики обретают имена, инструменты расходятся по своим местам и настраиваются перед 
   * концертом.
   */
  void Start () {
    // Кэшируем все компоненты типа AudioSource 
    audios = GetComponents<AudioSource>(); 

    // 1 динамик - для музыкы
    asMusic = audios[0];
    // 2 - БОНЬКающим кнопкам
    asUISound = audios[1]; 
    // 3-5 - остальным звукам
    for (int i = 2; i < 5; ++i) { 
      asSound[i-2] = audios[i];
    }
    // Перемещаем источник звука в центр главной камеры (чтобы не было проблемы с 3Д звуками в 
    // 2Д играх). Если 3Д звуков у вас нет, то можете этого не делать. Без этой строки в iOS звуки
    // почему-то были тише, чем на Android, хотя все звуки были 2D.
    GetComponent<Transform>().position = Camera.main.GetComponent<Transform>().position;

    // NOTE: Здесь используется очень тяжелая операция GetComponent<Type>(). Если собираетесь
    // применять её чаще для одного и того же компонента, то используйте кеширование.
    // Например Transfor Tr = GetComponent<Transform>(); И далее уже пользуетесь Tr.
  }

  /// Воспроизвести звук для UI
  /**
   * Метод один раз воспроизводит переданный звук.
   * Рекомендуется использовать только для UI элементов.
   * @param a Звук, который необходимо воспроизвести UI элементу
   */
  public void PlayUI(AudioClip a) {
    asUISound.PlayOneShot(a);
  }

  /// Запустить воспроизведение музыки
  /**
   * Метод начинает воспроизведение музыки. 
   * После того как молодия заканчивается она играет сначала и так по кругу.
   * Рекомендуется использовать только для музыки.
   * @param a Мелодия для воспроизведения
   */
  public void MusicPlay(AudioClip a) {
    // Назначить мелодию
    asMusic.clip = a;

    // Включить воспроизведение в цикле
    asMusic.loop = true;

    // Запустить воспроизведение
    asMusic.Play();
  }


  /// Выключить музыку
  /**
   * Метод останавливает воспроизведение музыки. 
   */
  public void MusicOFF() {
    // Сохраняем в PlayerPrefs - мы же не хотим заставлять игрока выключать музыку 
    // каждый раз при входе в игру 
    PlayerPrefs.SetInt("m", 0);

    // Снижаем громкость до 0
    asMusic.volume = 0.0F;
  }

  /// Включить музыку
  /**
   * Метод продолжает воспроизведение музыки. Операция обратная MusicOFF()
   */
  public void MusicON() {
    // Сохраняем в PlayerPrefs факт включения музыки
    PlayerPrefs.SetInt("m", 1);

    // Возвращаем громкость до состояния 1. Громче она быть не может.
    asMusic.volume = 1.0F;
  }


  /// Выключить звуки
  /**
   * Метод выключает все звуки: и звуки UI, и звуки шумов.
   */
  public void SoundOFF() {
    // Сохраняем в PlayerPrefs факт о выключении звуков
    PlayerPrefs.SetInt("s", 0);

    // Снижаем громкость динамика, отвечающего за звуки UI элементов, до нуля
    asUISound.volume = 0.0F;

    // Снижаем громкость динамиков, отвечающих за шумы
    for (int i = 0; i < asSound.Length; ++i) {
      asSound[i].volume = 0.0F;
    }
  }

  /// Включить звуки
  /**
   * Метод включает все звуки: и звуки UI, и звуки шумов.
   * Операция, обратная SoundOFF
   */
  public void SoundON() {
    PlayerPrefs.SetInt("s", 1);
    asUISound.volume = 1.0F;
    for (int i = 0; i < asSound.Length; ++i) {
      asSound[i].volume = 1.0F;
    }
  }

  /// Остановить музыку
  /**
   * Прекратить играть музыку. Совсем.
   */
  public void MusicStop() {
    sMusic.Stop();
  }

  /// Поставить музыку на паузу.
  /**
   * Временно останавливает воспроизведение музыки
   */
  public void MusicPause() {
    asMusic.Pause();
  }

  /// Снять музыку с паузы.
  /**
   * Продолжает воспроизведение музыки с места паузы
   */
  public void MusicUnPause() {
    asMusic.UnPause();
  }

  //NOTE: Иногда ошибка в одной букве имени метода может стать трагичной.

  /// Закрытый метод для поиска свободно динамика
  /**
   * Ищет не занятый AudioSource из трех "шумовых"
   * @result индекс незанятого динамика
   */
  int TakeFreeAus() {
    for (int i = 0; i < 3; ++i) {
      if (!asSound[i].isPlaying) {
        return i;
      }
    }
    //если свободных нет - принудительно играет нулевым
    return 0;
  }

  /// Метод для воспроизведения шумов
  /**
   * Играет обычный звук, используя закрытый метод TakeFreeAus для поиска свободного динамика
   */
  public void PlaySound(AudioClip a ) {
    sSound[TakeFreeAus()].PlayOneShot(a);
  }

}
